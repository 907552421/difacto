// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: config.proto

#ifndef PROTOBUF_config_2eproto__INCLUDED
#define PROTOBUF_config_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace difacto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_config_2eproto();
void protobuf_AssignDesc_config_2eproto();
void protobuf_ShutdownFile_config_2eproto();

class Config;

// ===================================================================

class Config : public ::google::protobuf::Message {
 public:
  Config();
  virtual ~Config();

  Config(const Config& from);

  inline Config& operator=(const Config& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Config& default_instance();

  void Swap(Config* other);

  // implements Message ----------------------------------------------

  Config* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Config& from);
  void MergeFrom(const Config& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string task = 1 [default = "train"];
  inline bool has_task() const;
  inline void clear_task();
  static const int kTaskFieldNumber = 1;
  inline const ::std::string& task() const;
  inline void set_task(const ::std::string& value);
  inline void set_task(const char* value);
  inline void set_task(const char* value, size_t size);
  inline ::std::string* mutable_task();
  inline ::std::string* release_task();
  inline void set_allocated_task(::std::string* task);

  // optional string data_in = 2;
  inline bool has_data_in() const;
  inline void clear_data_in();
  static const int kDataInFieldNumber = 2;
  inline const ::std::string& data_in() const;
  inline void set_data_in(const ::std::string& value);
  inline void set_data_in(const char* value);
  inline void set_data_in(const char* value, size_t size);
  inline ::std::string* mutable_data_in();
  inline ::std::string* release_data_in();
  inline void set_allocated_data_in(::std::string* data_in);

  // optional string val_data = 3;
  inline bool has_val_data() const;
  inline void clear_val_data();
  static const int kValDataFieldNumber = 3;
  inline const ::std::string& val_data() const;
  inline void set_val_data(const ::std::string& value);
  inline void set_val_data(const char* value);
  inline void set_val_data(const char* value, size_t size);
  inline ::std::string* mutable_val_data();
  inline ::std::string* release_val_data();
  inline void set_allocated_val_data(::std::string* val_data);

  // optional string data_format = 4 [default = "libsvm"];
  inline bool has_data_format() const;
  inline void clear_data_format();
  static const int kDataFormatFieldNumber = 4;
  inline const ::std::string& data_format() const;
  inline void set_data_format(const ::std::string& value);
  inline void set_data_format(const char* value);
  inline void set_data_format(const char* value, size_t size);
  inline ::std::string* mutable_data_format();
  inline ::std::string* release_data_format();
  inline void set_allocated_data_format(::std::string* data_format);

  // optional string model_out = 6;
  inline bool has_model_out() const;
  inline void clear_model_out();
  static const int kModelOutFieldNumber = 6;
  inline const ::std::string& model_out() const;
  inline void set_model_out(const ::std::string& value);
  inline void set_model_out(const char* value);
  inline void set_model_out(const char* value, size_t size);
  inline ::std::string* mutable_model_out();
  inline ::std::string* release_model_out();
  inline void set_allocated_model_out(::std::string* model_out);

  // optional string model_in = 5;
  inline bool has_model_in() const;
  inline void clear_model_in();
  static const int kModelInFieldNumber = 5;
  inline const ::std::string& model_in() const;
  inline void set_model_in(const ::std::string& value);
  inline void set_model_in(const char* value);
  inline void set_model_in(const char* value, size_t size);
  inline ::std::string* mutable_model_in();
  inline ::std::string* release_model_in();
  inline void set_allocated_model_in(::std::string* model_in);

  // optional string predict_out = 8;
  inline bool has_predict_out() const;
  inline void clear_predict_out();
  static const int kPredictOutFieldNumber = 8;
  inline const ::std::string& predict_out() const;
  inline void set_predict_out(const ::std::string& value);
  inline void set_predict_out(const char* value);
  inline void set_predict_out(const char* value, size_t size);
  inline ::std::string* mutable_predict_out();
  inline ::std::string* release_predict_out();
  inline void set_allocated_predict_out(::std::string* predict_out);

  // optional uint64 feature_size = 7;
  inline bool has_feature_size() const;
  inline void clear_feature_size();
  static const int kFeatureSizeFieldNumber = 7;
  inline ::google::protobuf::uint64 feature_size() const;
  inline void set_feature_size(::google::protobuf::uint64 value);

  // optional float l1 = 10 [default = 1];
  inline bool has_l1() const;
  inline void clear_l1();
  static const int kL1FieldNumber = 10;
  inline float l1() const;
  inline void set_l1(float value);

  // optional float l2 = 11 [default = 0];
  inline bool has_l2() const;
  inline void clear_l2();
  static const int kL2FieldNumber = 11;
  inline float l2() const;
  inline void set_l2(float value);

  // optional float lr = 12 [default = 0.01];
  inline bool has_lr() const;
  inline void clear_lr();
  static const int kLrFieldNumber = 12;
  inline float lr() const;
  inline void set_lr(float value);

  // optional int32 V_dim = 21 [default = 10];
  inline bool has_v_dim() const;
  inline void clear_v_dim();
  static const int kVDimFieldNumber = 21;
  inline ::google::protobuf::int32 v_dim() const;
  inline void set_v_dim(::google::protobuf::int32 value);

  // optional float V_l2 = 22;
  inline bool has_v_l2() const;
  inline void clear_v_l2();
  static const int kVL2FieldNumber = 22;
  inline float v_l2() const;
  inline void set_v_l2(float value);

  // optional string algo = 30 [default = "sgd"];
  inline bool has_algo() const;
  inline void clear_algo();
  static const int kAlgoFieldNumber = 30;
  inline const ::std::string& algo() const;
  inline void set_algo(const ::std::string& value);
  inline void set_algo(const char* value);
  inline void set_algo(const char* value, size_t size);
  inline ::std::string* mutable_algo();
  inline ::std::string* release_algo();
  inline void set_allocated_algo(::std::string* algo);

  // optional int32 minibatch = 31 [default = 1000];
  inline bool has_minibatch() const;
  inline void clear_minibatch();
  static const int kMinibatchFieldNumber = 31;
  inline ::google::protobuf::int32 minibatch() const;
  inline void set_minibatch(::google::protobuf::int32 value);

  // optional int32 max_epoch = 32 [default = 10];
  inline bool has_max_epoch() const;
  inline void clear_max_epoch();
  static const int kMaxEpochFieldNumber = 32;
  inline ::google::protobuf::int32 max_epoch() const;
  inline void set_max_epoch(::google::protobuf::int32 value);

  // optional bool early_stop = 33 [default = false];
  inline bool has_early_stop() const;
  inline void clear_early_stop();
  static const int kEarlyStopFieldNumber = 33;
  inline bool early_stop() const;
  inline void set_early_stop(bool value);

  // optional int32 save_epoch = 40 [default = -1];
  inline bool has_save_epoch() const;
  inline void clear_save_epoch();
  static const int kSaveEpochFieldNumber = 40;
  inline ::google::protobuf::int32 save_epoch() const;
  inline void set_save_epoch(::google::protobuf::int32 value);

  // optional int32 load_iter = 41 [default = -1];
  inline bool has_load_iter() const;
  inline void clear_load_iter();
  static const int kLoadIterFieldNumber = 41;
  inline ::google::protobuf::int32 load_iter() const;
  inline void set_load_iter(::google::protobuf::int32 value);

  // optional bool local_data = 42 [default = false];
  inline bool has_local_data() const;
  inline void clear_local_data();
  static const int kLocalDataFieldNumber = 42;
  inline bool local_data() const;
  inline void set_local_data(bool value);

  // optional float neg_sampling = 104 [default = 1];
  inline bool has_neg_sampling() const;
  inline void clear_neg_sampling();
  static const int kNegSamplingFieldNumber = 104;
  inline float neg_sampling() const;
  inline void set_neg_sampling(float value);

  // optional int32 rand_shuffle = 103 [default = 10];
  inline bool has_rand_shuffle() const;
  inline void clear_rand_shuffle();
  static const int kRandShuffleFieldNumber = 103;
  inline ::google::protobuf::int32 rand_shuffle() const;
  inline void set_rand_shuffle(::google::protobuf::int32 value);

  // optional bool prob_predict = 105 [default = true];
  inline bool has_prob_predict() const;
  inline void clear_prob_predict();
  static const int kProbPredictFieldNumber = 105;
  inline bool prob_predict() const;
  inline void set_prob_predict(bool value);

  // optional bool l1_shrk = 114 [default = true];
  inline bool has_l1_shrk() const;
  inline void clear_l1_shrk();
  static const int kL1ShrkFieldNumber = 114;
  inline bool l1_shrk() const;
  inline void set_l1_shrk(bool value);

  // optional int32 V_threshold = 62 [default = 10];
  inline bool has_v_threshold() const;
  inline void clear_v_threshold();
  static const int kVThresholdFieldNumber = 62;
  inline ::google::protobuf::int32 v_threshold() const;
  inline void set_v_threshold(::google::protobuf::int32 value);

  // optional float V_lr = 64 [default = 0.01];
  inline bool has_v_lr() const;
  inline void clear_v_lr();
  static const int kVLrFieldNumber = 64;
  inline float v_lr() const;
  inline void set_v_lr(float value);

  // optional float V_lr_beta = 65 [default = 1];
  inline bool has_v_lr_beta() const;
  inline void clear_v_lr_beta();
  static const int kVLrBetaFieldNumber = 65;
  inline float v_lr_beta() const;
  inline void set_v_lr_beta(float value);

  // optional float V_dropout = 67 [default = 0];
  inline bool has_v_dropout() const;
  inline void clear_v_dropout();
  static const int kVDropoutFieldNumber = 67;
  inline float v_dropout() const;
  inline void set_v_dropout(float value);

  // optional float V_grad_clipping = 68 [default = 0];
  inline bool has_v_grad_clipping() const;
  inline void clear_v_grad_clipping();
  static const int kVGradClippingFieldNumber = 68;
  inline float v_grad_clipping() const;
  inline void set_v_grad_clipping(float value);

  // optional float V_init_scale = 66 [default = 0.01];
  inline bool has_v_init_scale() const;
  inline void clear_v_init_scale();
  static const int kVInitScaleFieldNumber = 66;
  inline float v_init_scale() const;
  inline void set_v_init_scale(float value);

  // optional float V_grad_normalization = 69 [default = 0];
  inline bool has_v_grad_normalization() const;
  inline void clear_v_grad_normalization();
  static const int kVGradNormalizationFieldNumber = 69;
  inline float v_grad_normalization() const;
  inline void set_v_grad_normalization(float value);

  // optional float print_sec = 111 [default = 1];
  inline bool has_print_sec() const;
  inline void clear_print_sec();
  static const int kPrintSecFieldNumber = 111;
  inline float print_sec() const;
  inline void set_print_sec(float value);

  // optional float lr_beta = 112 [default = 1];
  inline bool has_lr_beta() const;
  inline void clear_lr_beta();
  static const int kLrBetaFieldNumber = 112;
  inline float lr_beta() const;
  inline void set_lr_beta(float value);

  // optional float min_objv_decr = 119 [default = 1e-05];
  inline bool has_min_objv_decr() const;
  inline void clear_min_objv_decr();
  static const int kMinObjvDecrFieldNumber = 119;
  inline float min_objv_decr() const;
  inline void set_min_objv_decr(float value);

  // optional float max_objv = 118;
  inline bool has_max_objv() const;
  inline void clear_max_objv();
  static const int kMaxObjvFieldNumber = 118;
  inline float max_objv() const;
  inline void set_max_objv(float value);

  // optional int32 num_threads = 121 [default = 2];
  inline bool has_num_threads() const;
  inline void clear_num_threads();
  static const int kNumThreadsFieldNumber = 121;
  inline ::google::protobuf::int32 num_threads() const;
  inline void set_num_threads(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:difacto.Config)
 private:
  inline void set_has_task();
  inline void clear_has_task();
  inline void set_has_data_in();
  inline void clear_has_data_in();
  inline void set_has_val_data();
  inline void clear_has_val_data();
  inline void set_has_data_format();
  inline void clear_has_data_format();
  inline void set_has_model_out();
  inline void clear_has_model_out();
  inline void set_has_model_in();
  inline void clear_has_model_in();
  inline void set_has_predict_out();
  inline void clear_has_predict_out();
  inline void set_has_feature_size();
  inline void clear_has_feature_size();
  inline void set_has_l1();
  inline void clear_has_l1();
  inline void set_has_l2();
  inline void clear_has_l2();
  inline void set_has_lr();
  inline void clear_has_lr();
  inline void set_has_v_dim();
  inline void clear_has_v_dim();
  inline void set_has_v_l2();
  inline void clear_has_v_l2();
  inline void set_has_algo();
  inline void clear_has_algo();
  inline void set_has_minibatch();
  inline void clear_has_minibatch();
  inline void set_has_max_epoch();
  inline void clear_has_max_epoch();
  inline void set_has_early_stop();
  inline void clear_has_early_stop();
  inline void set_has_save_epoch();
  inline void clear_has_save_epoch();
  inline void set_has_load_iter();
  inline void clear_has_load_iter();
  inline void set_has_local_data();
  inline void clear_has_local_data();
  inline void set_has_neg_sampling();
  inline void clear_has_neg_sampling();
  inline void set_has_rand_shuffle();
  inline void clear_has_rand_shuffle();
  inline void set_has_prob_predict();
  inline void clear_has_prob_predict();
  inline void set_has_l1_shrk();
  inline void clear_has_l1_shrk();
  inline void set_has_v_threshold();
  inline void clear_has_v_threshold();
  inline void set_has_v_lr();
  inline void clear_has_v_lr();
  inline void set_has_v_lr_beta();
  inline void clear_has_v_lr_beta();
  inline void set_has_v_dropout();
  inline void clear_has_v_dropout();
  inline void set_has_v_grad_clipping();
  inline void clear_has_v_grad_clipping();
  inline void set_has_v_init_scale();
  inline void clear_has_v_init_scale();
  inline void set_has_v_grad_normalization();
  inline void clear_has_v_grad_normalization();
  inline void set_has_print_sec();
  inline void clear_has_print_sec();
  inline void set_has_lr_beta();
  inline void clear_has_lr_beta();
  inline void set_has_min_objv_decr();
  inline void clear_has_min_objv_decr();
  inline void set_has_max_objv();
  inline void clear_has_max_objv();
  inline void set_has_num_threads();
  inline void clear_has_num_threads();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* task_;
  static ::std::string* _default_task_;
  ::std::string* data_in_;
  ::std::string* val_data_;
  ::std::string* data_format_;
  static ::std::string* _default_data_format_;
  ::std::string* model_out_;
  ::std::string* model_in_;
  ::std::string* predict_out_;
  ::google::protobuf::uint64 feature_size_;
  float l1_;
  float l2_;
  float lr_;
  ::google::protobuf::int32 v_dim_;
  ::std::string* algo_;
  static ::std::string* _default_algo_;
  float v_l2_;
  ::google::protobuf::int32 minibatch_;
  ::google::protobuf::int32 max_epoch_;
  ::google::protobuf::int32 save_epoch_;
  ::google::protobuf::int32 load_iter_;
  bool early_stop_;
  bool local_data_;
  bool prob_predict_;
  bool l1_shrk_;
  float neg_sampling_;
  ::google::protobuf::int32 rand_shuffle_;
  ::google::protobuf::int32 v_threshold_;
  float v_lr_;
  float v_lr_beta_;
  float v_dropout_;
  float v_grad_clipping_;
  float v_init_scale_;
  float v_grad_normalization_;
  float print_sec_;
  float lr_beta_;
  float min_objv_decr_;
  float max_objv_;
  ::google::protobuf::int32 num_threads_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(36 + 31) / 32];

  friend void  protobuf_AddDesc_config_2eproto();
  friend void protobuf_AssignDesc_config_2eproto();
  friend void protobuf_ShutdownFile_config_2eproto();

  void InitAsDefaultInstance();
  static Config* default_instance_;
};
// ===================================================================


// ===================================================================

// Config

// optional string task = 1 [default = "train"];
inline bool Config::has_task() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Config::set_has_task() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Config::clear_has_task() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Config::clear_task() {
  if (task_ != _default_task_) {
    task_->assign(*_default_task_);
  }
  clear_has_task();
}
inline const ::std::string& Config::task() const {
  return *task_;
}
inline void Config::set_task(const ::std::string& value) {
  set_has_task();
  if (task_ == _default_task_) {
    task_ = new ::std::string;
  }
  task_->assign(value);
}
inline void Config::set_task(const char* value) {
  set_has_task();
  if (task_ == _default_task_) {
    task_ = new ::std::string;
  }
  task_->assign(value);
}
inline void Config::set_task(const char* value, size_t size) {
  set_has_task();
  if (task_ == _default_task_) {
    task_ = new ::std::string;
  }
  task_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Config::mutable_task() {
  set_has_task();
  if (task_ == _default_task_) {
    task_ = new ::std::string(*_default_task_);
  }
  return task_;
}
inline ::std::string* Config::release_task() {
  clear_has_task();
  if (task_ == _default_task_) {
    return NULL;
  } else {
    ::std::string* temp = task_;
    task_ = const_cast< ::std::string*>(_default_task_);
    return temp;
  }
}
inline void Config::set_allocated_task(::std::string* task) {
  if (task_ != _default_task_) {
    delete task_;
  }
  if (task) {
    set_has_task();
    task_ = task;
  } else {
    clear_has_task();
    task_ = const_cast< ::std::string*>(_default_task_);
  }
}

// optional string data_in = 2;
inline bool Config::has_data_in() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Config::set_has_data_in() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Config::clear_has_data_in() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Config::clear_data_in() {
  if (data_in_ != &::google::protobuf::internal::kEmptyString) {
    data_in_->clear();
  }
  clear_has_data_in();
}
inline const ::std::string& Config::data_in() const {
  return *data_in_;
}
inline void Config::set_data_in(const ::std::string& value) {
  set_has_data_in();
  if (data_in_ == &::google::protobuf::internal::kEmptyString) {
    data_in_ = new ::std::string;
  }
  data_in_->assign(value);
}
inline void Config::set_data_in(const char* value) {
  set_has_data_in();
  if (data_in_ == &::google::protobuf::internal::kEmptyString) {
    data_in_ = new ::std::string;
  }
  data_in_->assign(value);
}
inline void Config::set_data_in(const char* value, size_t size) {
  set_has_data_in();
  if (data_in_ == &::google::protobuf::internal::kEmptyString) {
    data_in_ = new ::std::string;
  }
  data_in_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Config::mutable_data_in() {
  set_has_data_in();
  if (data_in_ == &::google::protobuf::internal::kEmptyString) {
    data_in_ = new ::std::string;
  }
  return data_in_;
}
inline ::std::string* Config::release_data_in() {
  clear_has_data_in();
  if (data_in_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_in_;
    data_in_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Config::set_allocated_data_in(::std::string* data_in) {
  if (data_in_ != &::google::protobuf::internal::kEmptyString) {
    delete data_in_;
  }
  if (data_in) {
    set_has_data_in();
    data_in_ = data_in;
  } else {
    clear_has_data_in();
    data_in_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string val_data = 3;
inline bool Config::has_val_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Config::set_has_val_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Config::clear_has_val_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Config::clear_val_data() {
  if (val_data_ != &::google::protobuf::internal::kEmptyString) {
    val_data_->clear();
  }
  clear_has_val_data();
}
inline const ::std::string& Config::val_data() const {
  return *val_data_;
}
inline void Config::set_val_data(const ::std::string& value) {
  set_has_val_data();
  if (val_data_ == &::google::protobuf::internal::kEmptyString) {
    val_data_ = new ::std::string;
  }
  val_data_->assign(value);
}
inline void Config::set_val_data(const char* value) {
  set_has_val_data();
  if (val_data_ == &::google::protobuf::internal::kEmptyString) {
    val_data_ = new ::std::string;
  }
  val_data_->assign(value);
}
inline void Config::set_val_data(const char* value, size_t size) {
  set_has_val_data();
  if (val_data_ == &::google::protobuf::internal::kEmptyString) {
    val_data_ = new ::std::string;
  }
  val_data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Config::mutable_val_data() {
  set_has_val_data();
  if (val_data_ == &::google::protobuf::internal::kEmptyString) {
    val_data_ = new ::std::string;
  }
  return val_data_;
}
inline ::std::string* Config::release_val_data() {
  clear_has_val_data();
  if (val_data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = val_data_;
    val_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Config::set_allocated_val_data(::std::string* val_data) {
  if (val_data_ != &::google::protobuf::internal::kEmptyString) {
    delete val_data_;
  }
  if (val_data) {
    set_has_val_data();
    val_data_ = val_data;
  } else {
    clear_has_val_data();
    val_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string data_format = 4 [default = "libsvm"];
inline bool Config::has_data_format() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Config::set_has_data_format() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Config::clear_has_data_format() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Config::clear_data_format() {
  if (data_format_ != _default_data_format_) {
    data_format_->assign(*_default_data_format_);
  }
  clear_has_data_format();
}
inline const ::std::string& Config::data_format() const {
  return *data_format_;
}
inline void Config::set_data_format(const ::std::string& value) {
  set_has_data_format();
  if (data_format_ == _default_data_format_) {
    data_format_ = new ::std::string;
  }
  data_format_->assign(value);
}
inline void Config::set_data_format(const char* value) {
  set_has_data_format();
  if (data_format_ == _default_data_format_) {
    data_format_ = new ::std::string;
  }
  data_format_->assign(value);
}
inline void Config::set_data_format(const char* value, size_t size) {
  set_has_data_format();
  if (data_format_ == _default_data_format_) {
    data_format_ = new ::std::string;
  }
  data_format_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Config::mutable_data_format() {
  set_has_data_format();
  if (data_format_ == _default_data_format_) {
    data_format_ = new ::std::string(*_default_data_format_);
  }
  return data_format_;
}
inline ::std::string* Config::release_data_format() {
  clear_has_data_format();
  if (data_format_ == _default_data_format_) {
    return NULL;
  } else {
    ::std::string* temp = data_format_;
    data_format_ = const_cast< ::std::string*>(_default_data_format_);
    return temp;
  }
}
inline void Config::set_allocated_data_format(::std::string* data_format) {
  if (data_format_ != _default_data_format_) {
    delete data_format_;
  }
  if (data_format) {
    set_has_data_format();
    data_format_ = data_format;
  } else {
    clear_has_data_format();
    data_format_ = const_cast< ::std::string*>(_default_data_format_);
  }
}

// optional string model_out = 6;
inline bool Config::has_model_out() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Config::set_has_model_out() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Config::clear_has_model_out() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Config::clear_model_out() {
  if (model_out_ != &::google::protobuf::internal::kEmptyString) {
    model_out_->clear();
  }
  clear_has_model_out();
}
inline const ::std::string& Config::model_out() const {
  return *model_out_;
}
inline void Config::set_model_out(const ::std::string& value) {
  set_has_model_out();
  if (model_out_ == &::google::protobuf::internal::kEmptyString) {
    model_out_ = new ::std::string;
  }
  model_out_->assign(value);
}
inline void Config::set_model_out(const char* value) {
  set_has_model_out();
  if (model_out_ == &::google::protobuf::internal::kEmptyString) {
    model_out_ = new ::std::string;
  }
  model_out_->assign(value);
}
inline void Config::set_model_out(const char* value, size_t size) {
  set_has_model_out();
  if (model_out_ == &::google::protobuf::internal::kEmptyString) {
    model_out_ = new ::std::string;
  }
  model_out_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Config::mutable_model_out() {
  set_has_model_out();
  if (model_out_ == &::google::protobuf::internal::kEmptyString) {
    model_out_ = new ::std::string;
  }
  return model_out_;
}
inline ::std::string* Config::release_model_out() {
  clear_has_model_out();
  if (model_out_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = model_out_;
    model_out_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Config::set_allocated_model_out(::std::string* model_out) {
  if (model_out_ != &::google::protobuf::internal::kEmptyString) {
    delete model_out_;
  }
  if (model_out) {
    set_has_model_out();
    model_out_ = model_out;
  } else {
    clear_has_model_out();
    model_out_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string model_in = 5;
inline bool Config::has_model_in() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Config::set_has_model_in() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Config::clear_has_model_in() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Config::clear_model_in() {
  if (model_in_ != &::google::protobuf::internal::kEmptyString) {
    model_in_->clear();
  }
  clear_has_model_in();
}
inline const ::std::string& Config::model_in() const {
  return *model_in_;
}
inline void Config::set_model_in(const ::std::string& value) {
  set_has_model_in();
  if (model_in_ == &::google::protobuf::internal::kEmptyString) {
    model_in_ = new ::std::string;
  }
  model_in_->assign(value);
}
inline void Config::set_model_in(const char* value) {
  set_has_model_in();
  if (model_in_ == &::google::protobuf::internal::kEmptyString) {
    model_in_ = new ::std::string;
  }
  model_in_->assign(value);
}
inline void Config::set_model_in(const char* value, size_t size) {
  set_has_model_in();
  if (model_in_ == &::google::protobuf::internal::kEmptyString) {
    model_in_ = new ::std::string;
  }
  model_in_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Config::mutable_model_in() {
  set_has_model_in();
  if (model_in_ == &::google::protobuf::internal::kEmptyString) {
    model_in_ = new ::std::string;
  }
  return model_in_;
}
inline ::std::string* Config::release_model_in() {
  clear_has_model_in();
  if (model_in_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = model_in_;
    model_in_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Config::set_allocated_model_in(::std::string* model_in) {
  if (model_in_ != &::google::protobuf::internal::kEmptyString) {
    delete model_in_;
  }
  if (model_in) {
    set_has_model_in();
    model_in_ = model_in;
  } else {
    clear_has_model_in();
    model_in_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string predict_out = 8;
inline bool Config::has_predict_out() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Config::set_has_predict_out() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Config::clear_has_predict_out() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Config::clear_predict_out() {
  if (predict_out_ != &::google::protobuf::internal::kEmptyString) {
    predict_out_->clear();
  }
  clear_has_predict_out();
}
inline const ::std::string& Config::predict_out() const {
  return *predict_out_;
}
inline void Config::set_predict_out(const ::std::string& value) {
  set_has_predict_out();
  if (predict_out_ == &::google::protobuf::internal::kEmptyString) {
    predict_out_ = new ::std::string;
  }
  predict_out_->assign(value);
}
inline void Config::set_predict_out(const char* value) {
  set_has_predict_out();
  if (predict_out_ == &::google::protobuf::internal::kEmptyString) {
    predict_out_ = new ::std::string;
  }
  predict_out_->assign(value);
}
inline void Config::set_predict_out(const char* value, size_t size) {
  set_has_predict_out();
  if (predict_out_ == &::google::protobuf::internal::kEmptyString) {
    predict_out_ = new ::std::string;
  }
  predict_out_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Config::mutable_predict_out() {
  set_has_predict_out();
  if (predict_out_ == &::google::protobuf::internal::kEmptyString) {
    predict_out_ = new ::std::string;
  }
  return predict_out_;
}
inline ::std::string* Config::release_predict_out() {
  clear_has_predict_out();
  if (predict_out_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = predict_out_;
    predict_out_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Config::set_allocated_predict_out(::std::string* predict_out) {
  if (predict_out_ != &::google::protobuf::internal::kEmptyString) {
    delete predict_out_;
  }
  if (predict_out) {
    set_has_predict_out();
    predict_out_ = predict_out;
  } else {
    clear_has_predict_out();
    predict_out_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 feature_size = 7;
inline bool Config::has_feature_size() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Config::set_has_feature_size() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Config::clear_has_feature_size() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Config::clear_feature_size() {
  feature_size_ = GOOGLE_ULONGLONG(0);
  clear_has_feature_size();
}
inline ::google::protobuf::uint64 Config::feature_size() const {
  return feature_size_;
}
inline void Config::set_feature_size(::google::protobuf::uint64 value) {
  set_has_feature_size();
  feature_size_ = value;
}

// optional float l1 = 10 [default = 1];
inline bool Config::has_l1() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Config::set_has_l1() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Config::clear_has_l1() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Config::clear_l1() {
  l1_ = 1;
  clear_has_l1();
}
inline float Config::l1() const {
  return l1_;
}
inline void Config::set_l1(float value) {
  set_has_l1();
  l1_ = value;
}

// optional float l2 = 11 [default = 0];
inline bool Config::has_l2() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Config::set_has_l2() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Config::clear_has_l2() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Config::clear_l2() {
  l2_ = 0;
  clear_has_l2();
}
inline float Config::l2() const {
  return l2_;
}
inline void Config::set_l2(float value) {
  set_has_l2();
  l2_ = value;
}

// optional float lr = 12 [default = 0.01];
inline bool Config::has_lr() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Config::set_has_lr() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Config::clear_has_lr() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Config::clear_lr() {
  lr_ = 0.01f;
  clear_has_lr();
}
inline float Config::lr() const {
  return lr_;
}
inline void Config::set_lr(float value) {
  set_has_lr();
  lr_ = value;
}

// optional int32 V_dim = 21 [default = 10];
inline bool Config::has_v_dim() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Config::set_has_v_dim() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Config::clear_has_v_dim() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Config::clear_v_dim() {
  v_dim_ = 10;
  clear_has_v_dim();
}
inline ::google::protobuf::int32 Config::v_dim() const {
  return v_dim_;
}
inline void Config::set_v_dim(::google::protobuf::int32 value) {
  set_has_v_dim();
  v_dim_ = value;
}

// optional float V_l2 = 22;
inline bool Config::has_v_l2() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Config::set_has_v_l2() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Config::clear_has_v_l2() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Config::clear_v_l2() {
  v_l2_ = 0;
  clear_has_v_l2();
}
inline float Config::v_l2() const {
  return v_l2_;
}
inline void Config::set_v_l2(float value) {
  set_has_v_l2();
  v_l2_ = value;
}

// optional string algo = 30 [default = "sgd"];
inline bool Config::has_algo() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Config::set_has_algo() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Config::clear_has_algo() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Config::clear_algo() {
  if (algo_ != _default_algo_) {
    algo_->assign(*_default_algo_);
  }
  clear_has_algo();
}
inline const ::std::string& Config::algo() const {
  return *algo_;
}
inline void Config::set_algo(const ::std::string& value) {
  set_has_algo();
  if (algo_ == _default_algo_) {
    algo_ = new ::std::string;
  }
  algo_->assign(value);
}
inline void Config::set_algo(const char* value) {
  set_has_algo();
  if (algo_ == _default_algo_) {
    algo_ = new ::std::string;
  }
  algo_->assign(value);
}
inline void Config::set_algo(const char* value, size_t size) {
  set_has_algo();
  if (algo_ == _default_algo_) {
    algo_ = new ::std::string;
  }
  algo_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Config::mutable_algo() {
  set_has_algo();
  if (algo_ == _default_algo_) {
    algo_ = new ::std::string(*_default_algo_);
  }
  return algo_;
}
inline ::std::string* Config::release_algo() {
  clear_has_algo();
  if (algo_ == _default_algo_) {
    return NULL;
  } else {
    ::std::string* temp = algo_;
    algo_ = const_cast< ::std::string*>(_default_algo_);
    return temp;
  }
}
inline void Config::set_allocated_algo(::std::string* algo) {
  if (algo_ != _default_algo_) {
    delete algo_;
  }
  if (algo) {
    set_has_algo();
    algo_ = algo;
  } else {
    clear_has_algo();
    algo_ = const_cast< ::std::string*>(_default_algo_);
  }
}

// optional int32 minibatch = 31 [default = 1000];
inline bool Config::has_minibatch() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Config::set_has_minibatch() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Config::clear_has_minibatch() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Config::clear_minibatch() {
  minibatch_ = 1000;
  clear_has_minibatch();
}
inline ::google::protobuf::int32 Config::minibatch() const {
  return minibatch_;
}
inline void Config::set_minibatch(::google::protobuf::int32 value) {
  set_has_minibatch();
  minibatch_ = value;
}

// optional int32 max_epoch = 32 [default = 10];
inline bool Config::has_max_epoch() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Config::set_has_max_epoch() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Config::clear_has_max_epoch() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Config::clear_max_epoch() {
  max_epoch_ = 10;
  clear_has_max_epoch();
}
inline ::google::protobuf::int32 Config::max_epoch() const {
  return max_epoch_;
}
inline void Config::set_max_epoch(::google::protobuf::int32 value) {
  set_has_max_epoch();
  max_epoch_ = value;
}

// optional bool early_stop = 33 [default = false];
inline bool Config::has_early_stop() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Config::set_has_early_stop() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Config::clear_has_early_stop() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Config::clear_early_stop() {
  early_stop_ = false;
  clear_has_early_stop();
}
inline bool Config::early_stop() const {
  return early_stop_;
}
inline void Config::set_early_stop(bool value) {
  set_has_early_stop();
  early_stop_ = value;
}

// optional int32 save_epoch = 40 [default = -1];
inline bool Config::has_save_epoch() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Config::set_has_save_epoch() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Config::clear_has_save_epoch() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Config::clear_save_epoch() {
  save_epoch_ = -1;
  clear_has_save_epoch();
}
inline ::google::protobuf::int32 Config::save_epoch() const {
  return save_epoch_;
}
inline void Config::set_save_epoch(::google::protobuf::int32 value) {
  set_has_save_epoch();
  save_epoch_ = value;
}

// optional int32 load_iter = 41 [default = -1];
inline bool Config::has_load_iter() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Config::set_has_load_iter() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Config::clear_has_load_iter() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Config::clear_load_iter() {
  load_iter_ = -1;
  clear_has_load_iter();
}
inline ::google::protobuf::int32 Config::load_iter() const {
  return load_iter_;
}
inline void Config::set_load_iter(::google::protobuf::int32 value) {
  set_has_load_iter();
  load_iter_ = value;
}

// optional bool local_data = 42 [default = false];
inline bool Config::has_local_data() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Config::set_has_local_data() {
  _has_bits_[0] |= 0x00080000u;
}
inline void Config::clear_has_local_data() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void Config::clear_local_data() {
  local_data_ = false;
  clear_has_local_data();
}
inline bool Config::local_data() const {
  return local_data_;
}
inline void Config::set_local_data(bool value) {
  set_has_local_data();
  local_data_ = value;
}

// optional float neg_sampling = 104 [default = 1];
inline bool Config::has_neg_sampling() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void Config::set_has_neg_sampling() {
  _has_bits_[0] |= 0x00100000u;
}
inline void Config::clear_has_neg_sampling() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void Config::clear_neg_sampling() {
  neg_sampling_ = 1;
  clear_has_neg_sampling();
}
inline float Config::neg_sampling() const {
  return neg_sampling_;
}
inline void Config::set_neg_sampling(float value) {
  set_has_neg_sampling();
  neg_sampling_ = value;
}

// optional int32 rand_shuffle = 103 [default = 10];
inline bool Config::has_rand_shuffle() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void Config::set_has_rand_shuffle() {
  _has_bits_[0] |= 0x00200000u;
}
inline void Config::clear_has_rand_shuffle() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void Config::clear_rand_shuffle() {
  rand_shuffle_ = 10;
  clear_has_rand_shuffle();
}
inline ::google::protobuf::int32 Config::rand_shuffle() const {
  return rand_shuffle_;
}
inline void Config::set_rand_shuffle(::google::protobuf::int32 value) {
  set_has_rand_shuffle();
  rand_shuffle_ = value;
}

// optional bool prob_predict = 105 [default = true];
inline bool Config::has_prob_predict() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void Config::set_has_prob_predict() {
  _has_bits_[0] |= 0x00400000u;
}
inline void Config::clear_has_prob_predict() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void Config::clear_prob_predict() {
  prob_predict_ = true;
  clear_has_prob_predict();
}
inline bool Config::prob_predict() const {
  return prob_predict_;
}
inline void Config::set_prob_predict(bool value) {
  set_has_prob_predict();
  prob_predict_ = value;
}

// optional bool l1_shrk = 114 [default = true];
inline bool Config::has_l1_shrk() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void Config::set_has_l1_shrk() {
  _has_bits_[0] |= 0x00800000u;
}
inline void Config::clear_has_l1_shrk() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void Config::clear_l1_shrk() {
  l1_shrk_ = true;
  clear_has_l1_shrk();
}
inline bool Config::l1_shrk() const {
  return l1_shrk_;
}
inline void Config::set_l1_shrk(bool value) {
  set_has_l1_shrk();
  l1_shrk_ = value;
}

// optional int32 V_threshold = 62 [default = 10];
inline bool Config::has_v_threshold() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void Config::set_has_v_threshold() {
  _has_bits_[0] |= 0x01000000u;
}
inline void Config::clear_has_v_threshold() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void Config::clear_v_threshold() {
  v_threshold_ = 10;
  clear_has_v_threshold();
}
inline ::google::protobuf::int32 Config::v_threshold() const {
  return v_threshold_;
}
inline void Config::set_v_threshold(::google::protobuf::int32 value) {
  set_has_v_threshold();
  v_threshold_ = value;
}

// optional float V_lr = 64 [default = 0.01];
inline bool Config::has_v_lr() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void Config::set_has_v_lr() {
  _has_bits_[0] |= 0x02000000u;
}
inline void Config::clear_has_v_lr() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void Config::clear_v_lr() {
  v_lr_ = 0.01f;
  clear_has_v_lr();
}
inline float Config::v_lr() const {
  return v_lr_;
}
inline void Config::set_v_lr(float value) {
  set_has_v_lr();
  v_lr_ = value;
}

// optional float V_lr_beta = 65 [default = 1];
inline bool Config::has_v_lr_beta() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void Config::set_has_v_lr_beta() {
  _has_bits_[0] |= 0x04000000u;
}
inline void Config::clear_has_v_lr_beta() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void Config::clear_v_lr_beta() {
  v_lr_beta_ = 1;
  clear_has_v_lr_beta();
}
inline float Config::v_lr_beta() const {
  return v_lr_beta_;
}
inline void Config::set_v_lr_beta(float value) {
  set_has_v_lr_beta();
  v_lr_beta_ = value;
}

// optional float V_dropout = 67 [default = 0];
inline bool Config::has_v_dropout() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void Config::set_has_v_dropout() {
  _has_bits_[0] |= 0x08000000u;
}
inline void Config::clear_has_v_dropout() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void Config::clear_v_dropout() {
  v_dropout_ = 0;
  clear_has_v_dropout();
}
inline float Config::v_dropout() const {
  return v_dropout_;
}
inline void Config::set_v_dropout(float value) {
  set_has_v_dropout();
  v_dropout_ = value;
}

// optional float V_grad_clipping = 68 [default = 0];
inline bool Config::has_v_grad_clipping() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void Config::set_has_v_grad_clipping() {
  _has_bits_[0] |= 0x10000000u;
}
inline void Config::clear_has_v_grad_clipping() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void Config::clear_v_grad_clipping() {
  v_grad_clipping_ = 0;
  clear_has_v_grad_clipping();
}
inline float Config::v_grad_clipping() const {
  return v_grad_clipping_;
}
inline void Config::set_v_grad_clipping(float value) {
  set_has_v_grad_clipping();
  v_grad_clipping_ = value;
}

// optional float V_init_scale = 66 [default = 0.01];
inline bool Config::has_v_init_scale() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void Config::set_has_v_init_scale() {
  _has_bits_[0] |= 0x20000000u;
}
inline void Config::clear_has_v_init_scale() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void Config::clear_v_init_scale() {
  v_init_scale_ = 0.01f;
  clear_has_v_init_scale();
}
inline float Config::v_init_scale() const {
  return v_init_scale_;
}
inline void Config::set_v_init_scale(float value) {
  set_has_v_init_scale();
  v_init_scale_ = value;
}

// optional float V_grad_normalization = 69 [default = 0];
inline bool Config::has_v_grad_normalization() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void Config::set_has_v_grad_normalization() {
  _has_bits_[0] |= 0x40000000u;
}
inline void Config::clear_has_v_grad_normalization() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void Config::clear_v_grad_normalization() {
  v_grad_normalization_ = 0;
  clear_has_v_grad_normalization();
}
inline float Config::v_grad_normalization() const {
  return v_grad_normalization_;
}
inline void Config::set_v_grad_normalization(float value) {
  set_has_v_grad_normalization();
  v_grad_normalization_ = value;
}

// optional float print_sec = 111 [default = 1];
inline bool Config::has_print_sec() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void Config::set_has_print_sec() {
  _has_bits_[0] |= 0x80000000u;
}
inline void Config::clear_has_print_sec() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void Config::clear_print_sec() {
  print_sec_ = 1;
  clear_has_print_sec();
}
inline float Config::print_sec() const {
  return print_sec_;
}
inline void Config::set_print_sec(float value) {
  set_has_print_sec();
  print_sec_ = value;
}

// optional float lr_beta = 112 [default = 1];
inline bool Config::has_lr_beta() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void Config::set_has_lr_beta() {
  _has_bits_[1] |= 0x00000001u;
}
inline void Config::clear_has_lr_beta() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void Config::clear_lr_beta() {
  lr_beta_ = 1;
  clear_has_lr_beta();
}
inline float Config::lr_beta() const {
  return lr_beta_;
}
inline void Config::set_lr_beta(float value) {
  set_has_lr_beta();
  lr_beta_ = value;
}

// optional float min_objv_decr = 119 [default = 1e-05];
inline bool Config::has_min_objv_decr() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void Config::set_has_min_objv_decr() {
  _has_bits_[1] |= 0x00000002u;
}
inline void Config::clear_has_min_objv_decr() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void Config::clear_min_objv_decr() {
  min_objv_decr_ = 1e-05f;
  clear_has_min_objv_decr();
}
inline float Config::min_objv_decr() const {
  return min_objv_decr_;
}
inline void Config::set_min_objv_decr(float value) {
  set_has_min_objv_decr();
  min_objv_decr_ = value;
}

// optional float max_objv = 118;
inline bool Config::has_max_objv() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void Config::set_has_max_objv() {
  _has_bits_[1] |= 0x00000004u;
}
inline void Config::clear_has_max_objv() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void Config::clear_max_objv() {
  max_objv_ = 0;
  clear_has_max_objv();
}
inline float Config::max_objv() const {
  return max_objv_;
}
inline void Config::set_max_objv(float value) {
  set_has_max_objv();
  max_objv_ = value;
}

// optional int32 num_threads = 121 [default = 2];
inline bool Config::has_num_threads() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void Config::set_has_num_threads() {
  _has_bits_[1] |= 0x00000008u;
}
inline void Config::clear_has_num_threads() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void Config::clear_num_threads() {
  num_threads_ = 2;
  clear_has_num_threads();
}
inline ::google::protobuf::int32 Config::num_threads() const {
  return num_threads_;
}
inline void Config::set_num_threads(::google::protobuf::int32 value) {
  set_has_num_threads();
  num_threads_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace difacto

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_config_2eproto__INCLUDED
